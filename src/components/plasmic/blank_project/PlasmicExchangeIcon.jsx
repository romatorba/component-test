// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qNWqpef2mCvTAsHXLMc9BA
// Component: 0Mf-7FwPwG
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: qNWqpef2mCvTAsHXLMc9BA/projectcss
import * as sty from "./PlasmicExchangeIcon.module.css"; // plasmic-import: 0Mf-7FwPwG/css
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: AFuYjL4fqb/icon
import imageEAphGidphL from "./images/image.svg"; // plasmic-import: EAphGidphL/picture

export const PlasmicExchangeIcon__VariantProps = new Array(
  "unnamedGroupOfVariants"
);

export const PlasmicExchangeIcon__ArgProps = new Array();

function PlasmicExchangeIcon__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {(
        hasVariant(variants, "unnamedGroupOfVariants", "unnamedVariant")
          ? false
          : true
      ) ? (
        <img
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(defaultcss.img, sty.img, {
            [sty.img__unnamedGroupOfVariants_unnamedVariant]: hasVariant(
              variants,
              "unnamedGroupOfVariants",
              "unnamedVariant"
            )
          })}
          role={"img"}
          src={imageEAphGidphL}
        />
      ) : null}
      {(
        hasVariant(variants, "unnamedGroupOfVariants", "unnamedVariant")
          ? true
          : false
      ) ? (
        <Icon4Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg, {
            [sty.svg__unnamedGroupOfVariants_unnamedVariant]: hasVariant(
              variants,
              "unnamedGroupOfVariants",
              "unnamedVariant"
            )
          })}
          role={"img"}
        />
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "svg"],
  img: ["img"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicExchangeIcon__ArgProps,
      internalVariantPropNames: PlasmicExchangeIcon__VariantProps
    });

    return PlasmicExchangeIcon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExchangeIcon";
  } else {
    func.displayName = `PlasmicExchangeIcon.${nodeName}`;
  }
  return func;
}

export const PlasmicExchangeIcon = Object.assign(
  // Top-level PlasmicExchangeIcon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicExchangeIcon
    internalVariantProps: PlasmicExchangeIcon__VariantProps,
    internalArgProps: PlasmicExchangeIcon__ArgProps
  }
);

export default PlasmicExchangeIcon;
/* prettier-ignore-end */
