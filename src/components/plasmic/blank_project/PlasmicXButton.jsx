// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qNWqpef2mCvTAsHXLMc9BA
// Component: 4hoSR_LUFp
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: qNWqpef2mCvTAsHXLMc9BA/projectcss
import * as sty from "./PlasmicXButton.module.css"; // plasmic-import: 4hoSR_LUFp/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: qVk11DQQ5g/icon

export const PlasmicXButton__VariantProps = new Array();

export const PlasmicXButton__ArgProps = new Array();

function PlasmicXButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <a
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"buttonBase"}
        data-plasmic-override={overrides.buttonBase}
        hasGap={true}
        className={classNames(defaultcss.all, sty.buttonBase)}
      >
        <IconIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg)}
          role={"img"}
        />

        {false ? (
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__g3ShL
            )}
          >
            {"Button"}
          </div>
        ) : null}
        {false ? (
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__cTqIb
            )}
          >
            {"caret-down"}
          </div>
        ) : null}
      </p.Stack>
    </a>
  );
}

const PlasmicDescendants = {
  root: ["root", "buttonBase", "svg"],
  buttonBase: ["buttonBase", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicXButton__ArgProps,
      internalVariantPropNames: PlasmicXButton__VariantProps
    });

    return PlasmicXButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicXButton";
  } else {
    func.displayName = `PlasmicXButton.${nodeName}`;
  }
  return func;
}

export const PlasmicXButton = Object.assign(
  // Top-level PlasmicXButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    buttonBase: makeNodeComponent("buttonBase"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicXButton
    internalVariantProps: PlasmicXButton__VariantProps,
    internalArgProps: PlasmicXButton__ArgProps
  }
);

export default PlasmicXButton;
/* prettier-ignore-end */
