// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qNWqpef2mCvTAsHXLMc9BA
// Component: wR6mgwNbO5
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import WatchlistLabel from "../../WatchlistLabel"; // plasmic-import: 1OQ-ljilqK/component
import ExchangeIcon from "../../ExchangeIcon"; // plasmic-import: 0Mf-7FwPwG/component
import XButton from "../../XButton"; // plasmic-import: 4hoSR_LUFp/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: qNWqpef2mCvTAsHXLMc9BA/projectcss
import * as sty from "./PlasmicMarketTab.module.css"; // plasmic-import: wR6mgwNbO5/css

export const PlasmicMarketTab__VariantProps = new Array();

export const PlasmicMarketTab__ArgProps = new Array();

function PlasmicMarketTab__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <WatchlistLabel
        data-plasmic-name={"watchlistLabel"}
        data-plasmic-override={overrides.watchlistLabel}
        className={classNames("__wab_instance", sty.watchlistLabel)}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box___0Woyd)}
      >
        <div className={classNames(defaultcss.all, sty.box__m8XlP)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__laFh3)}
          >
            <ExchangeIcon
              data-plasmic-name={"exchangeIcon"}
              data-plasmic-override={overrides.exchangeIcon}
              className={classNames("__wab_instance", sty.exchangeIcon)}
            />

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__lyEl
              )}
            >
              {"BTC/USDT"}
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"marketTabResolution"}
              data-plasmic-override={overrides.marketTabResolution}
              hasGap={true}
              className={classNames(defaultcss.all, sty.marketTabResolution)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__cu4OE
                )}
              >
                {"1h"}
              </div>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__vXi9E)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__ymFiM
              )}
            >
              {"54164.73"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__cSfdq
              )}
            >
              {"+2.14%"}
            </div>
          </p.Stack>
        </div>

        <XButton
          data-plasmic-name={"xButton"}
          data-plasmic-override={overrides.xButton}
          className={classNames("__wab_instance", sty.xButton)}
        />
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "watchlistLabel",
    "exchangeIcon",
    "marketTabResolution",
    "xButton"
  ],

  watchlistLabel: ["watchlistLabel"],
  exchangeIcon: ["exchangeIcon"],
  marketTabResolution: ["marketTabResolution"],
  xButton: ["xButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMarketTab__ArgProps,
      internalVariantPropNames: PlasmicMarketTab__VariantProps
    });

    return PlasmicMarketTab__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMarketTab";
  } else {
    func.displayName = `PlasmicMarketTab.${nodeName}`;
  }
  return func;
}

export const PlasmicMarketTab = Object.assign(
  // Top-level PlasmicMarketTab renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    watchlistLabel: makeNodeComponent("watchlistLabel"),
    exchangeIcon: makeNodeComponent("exchangeIcon"),
    marketTabResolution: makeNodeComponent("marketTabResolution"),
    xButton: makeNodeComponent("xButton"),
    // Metadata about props expected for PlasmicMarketTab
    internalVariantProps: PlasmicMarketTab__VariantProps,
    internalArgProps: PlasmicMarketTab__ArgProps
  }
);

export default PlasmicMarketTab;
/* prettier-ignore-end */
